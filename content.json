{"meta":{"title":"Loneyclown","subtitle":"能可爱，绝不狗带","description":null,"author":"Loneyclown","url":"https://loneyclown.github.io","root":"/"},"pages":[{"title":"归档","date":"2019-08-01T12:36:55.000Z","updated":"2021-09-26T06:36:32.090Z","comments":true,"path":"archives/index.html","permalink":"https://loneyclown.github.io/archives/index.html","excerpt":"","text":""},{"title":"博文分类","date":"2021-09-26T06:36:32.091Z","updated":"2021-09-26T06:36:32.091Z","comments":false,"path":"categories/index.html","permalink":"https://loneyclown.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-09-26T06:36:32.091Z","updated":"2021-09-26T06:36:32.091Z","comments":false,"path":"tags/index.html","permalink":"https://loneyclown.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Jupyter Notebook 安装以支持js","slug":"studyNotes/2021-06-02-notes","date":"2021-06-01T16:00:00.000Z","updated":"2021-09-26T06:36:32.090Z","comments":true,"path":"2021/06/02/studyNotes/2021-06-02-notes/","link":"","permalink":"https://loneyclown.github.io/2021/06/02/studyNotes/2021-06-02-notes/","excerpt":"","text":"安装 jupyterjupyter 官网先决条件：Python(Python的3.3或更高版本，或Python 2.7) 12pip3 install --upgrade pippip3 install jupyter 运行jupyter notebook，一切正常就可进行下一步。如果提示jupyter不存在，则需要手动设置环境变量。 MacOS手动设置环境变量编辑PATH配置文件：vim ~/.bash_profile末尾添加：export PATH=$PATH:/Library/Frameworks/Python.framework/Versions/3.8/binPS: 具体的python bin目录可根据安装方式自行查找 安装 IJavascriptIJavascript github： https://github.com/n-riesco/ijavascript MacOS123456ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"brew install pkg-config node zeromqsudo easy_install pippip install --upgrade pyzmq jupyternpm install -g ijavascriptijsinstall","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"jupyter","slug":"jupyter","permalink":"https://loneyclown.github.io/tags/jupyter/"}]},{"title":"三维立体坐标点，在x轴，y轴相同的情况下，取出z轴最大的坐标点","slug":"studyNotes/2020-04-29-notes","date":"2020-04-28T16:00:00.000Z","updated":"2021-09-26T06:36:32.090Z","comments":true,"path":"2020/04/29/studyNotes/2020-04-29-notes/","link":"","permalink":"https://loneyclown.github.io/2020/04/29/studyNotes/2020-04-29-notes/","excerpt":"","text":"题记最近朋友遇到一个问题，一组三维立体坐标点，在x轴，y轴相同的情况下，要取出z轴最大的那个的坐标点。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465const testArr = [ [45757.22541737171, 226532.12132301644, 52.45700027465815], [45757.22541737171, 226532.12132301644, 162.45700027465816], [45757.22541737171, 226532.12132301644, 72.45700027465816], [45757.22541737171, 226532.12132301644, 82.45700027465816], [45757.22541737171, 226532.12132301644, 92.45700027465816], [45757.22541737171, 226532.12132301644, 102.45700027465816], [45757.22541737171, 226532.12132301644, 112.45700027465816], [45757.22541737171, 226532.12132301644, 122.45700027465816], [45757.22541737171, 226532.12132301644, 132.45700027465816], [45757.22541737171, 226532.12132301644, 142.45700027465816], [45756.43914293511, 226562.64343069226, 52.457000274658206], [45756.43914293511, 226562.64343069226, 62.457000274658206], [45756.43914293511, 226562.64343069226, 72.45700027465821], [45756.43914293511, 226562.64343069226, 82.45700027465821], [45756.43914293511, 226562.64343069226, 92.45700027465821], [45756.43914293511, 226562.64343069226, 102.45700027465821], [45756.43914293511, 226562.64343069226, 112.45700027465821], [45791.873784629126, 226560.04881890872, 52.457000274658206], [45791.873784629126, 226560.04881890872, 172.4570002746582], [45791.873784629126, 226560.04881890872, 162.4570002746582], [45791.873784629126, 226560.04881890872, 142.4570002746582], [45791.873784629126, 226560.04881890872, 92.45700027465821], [45791.873784629126, 226560.04881890872, 102.45700027465821], [45791.873784629126, 226560.04881890872, 112.45700027465821], [45791.873784629126, 226560.04881890872, 122.45700027465821], [45791.873784629126, 226560.04881890872, 132.4570002746582], [45796.25954354428, 226532.31399971253, 52.45700027465815], [45796.25954354428, 226532.31399971253, 182.45700027465816], [45796.25954354428, 226532.31399971253, 162.45700027465816], [45796.25954354428, 226532.31399971253, 82.45700027465816], [45796.25954354428, 226532.31399971253, 92.45700027465816], [45796.25954354428, 226532.31399971253, 102.45700027465816], [45796.25954354428, 226532.31399971253, 112.45700027465816], [45796.25954354428, 226532.31399971253, 122.45700027465816], [45796.25954354428, 226532.31399971253, 132.45700027465816], [45796.25954354428, 226532.31399971253, 142.45700027465816], [45796.25954354428, 226532.31399971253, 152.45700027465816], [45796.25954354428, 226532.31399971253, 162.45700027465816], [45796.25954354428, 226532.31399971253, 182.45700027465816], [45796.25954354428, 226532.31399971253, 182.45700027465816], [45791.873784629126, 226560.04881890872, 142.4570002746582], [45791.873784629126, 226560.04881890872, 152.4570002746582], [45791.873784629126, 226560.04881890872, 162.4570002746582], [45791.873784629126, 226560.04881890872, 172.4570002746582], [45757.22541737171, 226532.12132301644, 162.45700027465816], [45757.22541737171, 226532.12132301644, 162.45700027465816]];function getZcoordMax (sourceArr) &#123; const res = sourceArr.reduce((acc, curr) =&gt; &#123; let key = curr.slice(0, 2).join(','), arr, z = curr[2]; acc[key] = acc[key] || &#123;&#125;; acc[key].max = acc[key].max || [0, 0, 0]; arr = acc[key].arr; if (arr) &#123; arr.push(z); if (acc[key].max[2] &lt;= z) acc[key].max = curr; &#125; else &#123; acc[key].arr = [z]; &#125; return acc &#125;, &#123;&#125;); return Object.keys(res).map(x =&gt; res[x].max);&#125; 输出结果： 123456[ [ 45757.22541737171, 226532.12132301644, 162.45700027465816 ], [ 45756.43914293511, 226562.64343069226, 112.45700027465821 ], [ 45791.873784629126, 226560.04881890872, 172.4570002746582 ], [ 45796.25954354428, 226532.31399971253, 182.45700027465816 ]]","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"js","slug":"js","permalink":"https://loneyclown.github.io/tags/js/"},{"name":"排序","slug":"排序","permalink":"https://loneyclown.github.io/tags/%E6%8E%92%E5%BA%8F/"}]},{"title":"机内码转区内码","slug":"randomNotes/2020-02-26-机内码转区内码","date":"2020-02-25T16:00:00.000Z","updated":"2021-09-26T06:36:32.088Z","comments":true,"path":"2020/02/26/randomNotes/2020-02-26-机内码转区内码/","link":"","permalink":"https://loneyclown.github.io/2020/02/26/randomNotes/2020-02-26-%E6%9C%BA%E5%86%85%E7%A0%81%E8%BD%AC%E5%8C%BA%E5%86%85%E7%A0%81/","excerpt":"","text":"1234567891011121314151617181920212223242526function 十六进制字符串转十六进制数(v) &#123; if (typeof v === \"string\") &#123; v = parseInt(\"0x\" + v); &#125; return v;&#125;function 机内码转汉字(机内码) &#123; 机内码 = 十六进制字符串转十六进制数(机内码); let 国标码 = (机内码 - 0x8080); let 区位码0x = (国标码 - 0x2020).toString(16); let 区位码拆s = 区位码0x.split(\"\").map(x =&gt; x); let 区位码s = [], 区 = \"\"; 区位码拆s.forEach((item, index) =&gt; &#123; 区 = 区+item; if((index+1)%2 === 0) &#123; 区位码s.push(区); 区 = \"\"; &#125; &#125;); 区位码s = 区位码s.map(x =&gt; 十六进制字符串转十六进制数(x)); return 区位码s.join(\"\");&#125;console.log(机内码转汉字(\"d3b2\"));// =&gt; 5118console.log(机内码转汉字(\"bacb\"));// =&gt; 2643","categories":[{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"}],"tags":[{"name":"字符编码","slug":"字符编码","permalink":"https://loneyclown.github.io/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"}]},{"title":"MAC无法开机，开机显示LOGO，无法进入系统","slug":"randomNotes/2020-02-14-MAC无法开机","date":"2020-02-13T16:00:00.000Z","updated":"2021-09-26T06:36:32.088Z","comments":true,"path":"2020/02/14/randomNotes/2020-02-14-MAC无法开机/","link":"","permalink":"https://loneyclown.github.io/2020/02/14/randomNotes/2020-02-14-MAC%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA/","excerpt":"","text":"题记今天作了个死，想给MAC装个双系统。结果直接翻车，安装win10的过程中失败了，然后重启直接整个电脑都垮掉。google了各种解决方法，终于是正常开机。 问题按照我的操作，然后根据我google的一些内容，初步判断问题的原因是mac硬盘记忆存储的问题。 解决既然是硬盘记忆存储的问题，那么解决方案就是清空硬盘缓存。方法如下： 进入macOS恢复模式 开启 Mac，然后立即按住 Command (⌘) 和 R 键。 当您看到 Apple 标志、旋转的地球或其他启动屏幕时，请松开这两个按键。 看到“实用工具”窗口时，启动即完成：参考链接：https://support.apple.com/zh-cn/HT201314 清楚硬盘缓存在“实用工具”界面，左上角找到终端工具，在终端命令行中按如下顺序执行命令： 12345# 进入缓存目录cd /Volumes/[你的硬盘名称]/var/db/caches/opendirectory/# 清楚缓存（将缓存文件重命名）mv ./mbr_cache ./mar_cache-old 然后，退出终端，退出实用工具。此时会弹出一个对话框，问是重新启动还是选择启动盘什么的。选择“选择启动盘”，然后选择安装了macOS的启动盘，重启即可。 附录1：参考链接 https://www.jianshu.com/p/1bb053414f74附录2：Mac 的启动组合键 https://support.apple.com/zh-cn/HT201255","categories":[{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"}],"tags":[{"name":"MAC","slug":"MAC","permalink":"https://loneyclown.github.io/tags/MAC/"}]},{"title":"GCP最新白嫖教程","slug":"randomNotes/2020-02-10-GCP最新白嫖教程","date":"2020-02-09T16:00:00.000Z","updated":"2021-09-26T06:36:32.088Z","comments":true,"path":"2020/02/10/randomNotes/2020-02-10-GCP最新白嫖教程/","link":"","permalink":"https://loneyclown.github.io/2020/02/10/randomNotes/2020-02-10-GCP%E6%9C%80%E6%96%B0%E7%99%BD%E5%AB%96%E6%95%99%E7%A8%8B/","excerpt":"","text":"准备无非是用没开通过GCP的新账户或者没注册过的信用卡，这里选择新账户： 没有开通过GCP的账户的Gmail账户(并夕夕等平台自行购买，3-6块一个吧)； 梯子 信用卡（PS：国内发行的bin为62开头的信用卡不可用） 开始1. 登录GCP最好用Chrome无痕模式打开链接:GCP 命令台 https://console.cloud.google.com按照提示输入账号密码登录，注意要修改辅助邮箱为你自己的邮箱，还有修改密码 2. 填写信息试用第一次进入会让你选择地区，默认美国就好左上角会显示试用邀请，点击了解详情点击免费开始使用地区选美国，点击继续账户类型选择个人，信息使用美国地址生成器生成美国地址生成器 http://www.shenfendaquan.com/Index/index/custom_result复制粘贴进去即可填写信用卡信息，用户名地址最好使用真实的信用卡信息避免验证不过 好像Google根本验证具体信息，反正我每次都这样填 ，等待信用卡预授权结束这里先不添加成员，选择略过点击左上角的账单，就能看到香喷喷的300刀一年试用额度到账，可以愉快的开始白嫖了，至于怎么利用VPS，不是本文重点，就不多赘述了。 无限续杯进入账单 - 账户管理 - 添加一位账单管理员 将旧帐号填上， 为了防止填错账号，先不要删除现在的管理员，避免添加错账号。无痕模式打开chrome登陆旧账号，会提示就能看到有多个结算账号了，选择转至关联账号。修改结算账号为刚开通的邮箱账号进入账单 - 账户管理 - 更改结算账号，选择有钱能付款的账号，避免被反撸。最后点击右上角显示用户信息面板，删除新账号的，只保留旧账号就可以了，这样，新账号里面的付款信息也会一并被删除。以上。 最后原作者的话：薅羊毛最好不要广而告之，最后大家都没有好果汁吃。 原文链接：https://hexo.aragon.wang/2019/10/14","categories":[{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"}],"tags":[{"name":"GCP","slug":"GCP","permalink":"https://loneyclown.github.io/tags/GCP/"},{"name":"白嫖","slug":"白嫖","permalink":"https://loneyclown.github.io/tags/%E7%99%BD%E5%AB%96/"}]},{"title":"Nginx配置反向代理并重写URL","slug":"randomNotes/2020-01-22-Nginx配置反向代理并重写URL","date":"2020-01-21T16:00:00.000Z","updated":"2021-09-26T06:36:32.088Z","comments":true,"path":"2020/01/22/randomNotes/2020-01-22-Nginx配置反向代理并重写URL/","link":"","permalink":"https://loneyclown.github.io/2020/01/22/randomNotes/2020-01-22-Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%B9%B6%E9%87%8D%E5%86%99URL/","excerpt":"","text":"nginx.conf1234567# ...location &#x2F;api &#123; rewrite &#x2F;api&#x2F;(.+)$ &#x2F;$1 break; proxy_pass http:&#x2F;&#x2F;localhost:3000 ; proxy_redirect off;&#125;# ... 访问：http://localhost/api，会代理到http://localhost:3000，http://localhost:3000路由中无需额外写/api，nginx会自动重写。","categories":[{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://loneyclown.github.io/tags/nginx/"}]},{"title":"MAC系统Nginx安装与操作","slug":"randomNotes/2020-01-17-MAC系统Nginx安装与操作","date":"2020-01-16T16:00:00.000Z","updated":"2021-09-26T06:36:32.088Z","comments":true,"path":"2020/01/17/randomNotes/2020-01-17-MAC系统Nginx安装与操作/","link":"","permalink":"https://loneyclown.github.io/2020/01/17/randomNotes/2020-01-17-MAC%E7%B3%BB%E7%BB%9FNginx%E5%AE%89%E8%A3%85%E4%B8%8E%E6%93%8D%E4%BD%9C/","excerpt":"","text":"安装安装Command Line tools1xcode-select --install 安装brew命令1ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 安装nginx1brew install nginx 操作启动1sudo nginx 若提示命令不存在，则找到nginx可执行文件，比如：/usr/local/bin/nginx寻找nginx可执行文件可使用命令find / -iname &quot;nginx&quot;，一般bin目录下的nginx就是可执行文件找到后，进入目录，执行： 1./nginx 重启1sudo nginx -s reload 提示找不到命令解决方法同启动 停止查询Nginx主线程1ps -el|grep nginx 正常停止1sudo kill -QUIT 进程号 快速停止1sudo kill -TERM 进程号 配置配置文件目录一般情况下，通过brew命令安装的nginx，配置文件目录在/usr/local/etc/nginx/若找不到上述目录，可以直接全局查找配置文件所在目录：find / -iname &quot;nginx.conf&quot;相关配置自行百度 查看配置文件是否正确1sudo nginx -t 出现如下结果说明配置文件正确：","categories":[{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"https://loneyclown.github.io/tags/macOS/"},{"name":"nginx","slug":"nginx","permalink":"https://loneyclown.github.io/tags/nginx/"}]},{"title":"关于MAC系统上向日葵等“流氓”软件的开机自启dis","slug":"randomNotes/2019-11-27-关于MAC系统上向日葵等“流氓”软件的开机自启dis","date":"2019-11-26T16:00:00.000Z","updated":"2021-09-26T06:36:32.087Z","comments":true,"path":"2019/11/27/randomNotes/2019-11-27-关于MAC系统上向日葵等“流氓”软件的开机自启dis/","link":"","permalink":"https://loneyclown.github.io/2019/11/27/randomNotes/2019-11-27-%E5%85%B3%E4%BA%8EMAC%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%90%91%E6%97%A5%E8%91%B5%E7%AD%89%E2%80%9C%E6%B5%81%E6%B0%93%E2%80%9D%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AFdis/","excerpt":"","text":"题记因为近期teamviewer遭到入侵，所以对于远控软件不得不重新选择。然后就入了向日葵的坑了…然后我就各种baidu、google，最后总算是战胜了“流氓”。 MAC管理开机自启的两种方式系统偏好设置里的开机自启（登录项/LoginItem）这种方式最简单直观 通过plist文件管理开机自启MAC分别有6个目录存放了开启自启的plist文件 Library/Preferences/ – （当前用户设置的进程）~/Library/LaunchAgents/ – （当前用户的守护进程）/Library/LaunchAgents/ – （管理员设置的用户进程）/Library/LaunchDaemons/ – （管理员提供的系统守护进程）/System/Library/LaunchAgents/ – （系统提供的用户进程）/System/Library/LaunchDaemons/ – （系统提供的系统守护进程） 这里以向日葵为例，安装了向日葵客户端和控制端后，分别在/Library/LaunchAgents/、/Library/LaunchDaemons/目录生成了4个plist文件：打开终端，输入： open /Library/LaunchAgents 使用任意文本编辑器编辑com.oray.sunlogin.agent.plist、com.oray.sunlogin.startup.plist两个文件，将Disabled改为true，将RunAtLoad改为false：打开终端，输入： open /Library/LaunchDaemons 编辑com.oray.sunlogin.helper.plist、com.oray.sunlogin.plist文件，将Disabled改为true，将RunAtLoad改为false： 这样，下次开机，向日葵便不会自启了。","categories":[{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"https://loneyclown.github.io/tags/macOS/"}]},{"title":"SVN命令行相关操作","slug":"randomNotes/2019-10-12-SVN命令行相关操作","date":"2019-10-11T16:00:00.000Z","updated":"2021-09-26T06:36:32.087Z","comments":true,"path":"2019/10/12/randomNotes/2019-10-12-SVN命令行相关操作/","link":"","permalink":"https://loneyclown.github.io/2019/10/12/randomNotes/2019-10-12-SVN%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/","excerpt":"","text":"基础操作将数据导入存储库1svn import https://svn.example.com/repos/MyRepo/MyProject/trunk -m \"Initial project import\" 签出工作副本1svn checkout https://svn.example.com/repos/MyRepo/MyProject/trunk MyWorkingCopy 更新工作副本1svn update 在本地工作副本中进行更改1svn commit -m \"My Descriptive Log Message\" 执行文件和目录操作添加新文件和目录12345678# 添加新文件到版本库svn add filename# 添加当前目录下所有php文件svn add *.php# 递归添加当前目录下的所有新文件svn add . --no-ignore --force 复制文件和目录1svn copy foo.cs bar.cs 删除文件和目录1svn delete foo.cs 恢复或放弃本地更改123456# 撤销本地文件的修改（还没提交的）svn revert test.phpsvn revert -r 目录名# 撤销目录下所有本地修改svn revert --recursive 目录名 查看日志和改动查看日志12345# 查看指定文件的所有日志svn log test.php# 查看指定版本号的日志svn log -r 100 查看改动1234567891011121314# 查看当前工作区的所有改动svn diff# 查看当前工作区test.php文件与最新版本的差异svn diff test.php # 指定版本号比较差异svn diff -r 200:201 test.php# 查看当前工作区和版本301中bin目录的差异svn diff -r 301 bin# 显示文件的每一行最后是谁修改的（出了BUG，经常用来查这段代码是谁改的）svn blame filename.php 查看版本库信息123456789101112# 查看当前工作区的状态svn status# 查看svn信息svn info# 查看文件列表，可以指定-r查看，查看指定版本号的文件列表svn ls svn ls -r 100# 查看指定版本的文件内容，不加版本号就是查看最新版本的svn cat test.py -r 2 清理12# 清理svn cleanup 分支和标记您应该使用svn copy命令创建分支和标签。当您希望项目与历史记录相关时，这是用于复制项目和存储库中项目的命令。svn copy命令用于分支，因为从技术上讲branch是复制源的副本。但是，它不是在本地文件系统上复制文件时所熟悉的普通副本。Subversion存储库中的分支称为“便宜副本”，类似于符号链接。因此，创建新分支将花费最少的时间来完成，并且在Subversion存储库中几乎不占用空间。您可以创建分支并将其用于所需的任何更改，而不考虑更改的大小和范围。 使用直接URL到URL复制创建分支1svn copy https://example.com/MyRepo/trunk https://example.com/MyRepo/branches/MyNewBranch -m \"Creating a new branch\" 创建分支123456789# 创建分支，从主干创建一个分支保存到branches/online1.0svn cp -m \"描述内容\" http://svnbucket.com/repos/trunk http://svnbucket.com/repos/branches/online1.0# 合并主干上的最新代码到分支上cd branches/online1.0svn merge http://svnbucket.com/repos/trunk # 分支合并到主干svn merge --reintegrate http://svnbucket.com/repos/branches/online1.0 切换分支12345# 切换当前项目到指定分支。服务器上更新新版本我们经常就用这个命令来把当前代码切换到新的分支svn switch svn://svnbucket.com/test/branches/online1.0# 重定向仓库地址到新地址svn switch --relocate 原svn地址 新svn地址 删除分支12# 删除分支svn rm http://svnbucket.com/repos/branches/online1.0 帮助12345# 查看SVN帮助svn help# 查看指定命令的帮助信息svn help commit 参阅官方文档：http://subversion.apache.org/quick-start参阅掘金长者文章：https://juejin.im/post/6844903599630188552","categories":[{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"}],"tags":[{"name":"svn","slug":"svn","permalink":"https://loneyclown.github.io/tags/svn/"}]},{"title":"无序json排序","slug":"studyNotes/2019-08-30-notes","date":"2019-08-29T16:00:00.000Z","updated":"2021-09-26T06:36:32.090Z","comments":true,"path":"2019/08/30/studyNotes/2019-08-30-notes/","link":"","permalink":"https://loneyclown.github.io/2019/08/30/studyNotes/2019-08-30-notes/","excerpt":"","text":"代码： 123456789101112131415let data = &#123; L1: [1,12,5,\"L1\"], B1: [1,12,5,\"B1\"], L3: [1,12,5,\"L3\"], L2: [1,12,5,\"L2\"]&#125;;let arr1 = [], arr2 = [];for(let i in data) &#123; arr1.push(i);&#125;arr1.sort();for(let i in arr1) &#123; arr2.push(data[arr1[i]]);&#125;console.log(arr2); 结果： 1234[ [ 1, 12, 5, &#39;B1&#39; ], [ 1, 12, 5, &#39;L1&#39; ], [ 1, 12, 5, &#39;L2&#39; ], [ 1, 12, 5, &#39;L3&#39; ] ]","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"js","slug":"js","permalink":"https://loneyclown.github.io/tags/js/"},{"name":"json","slug":"json","permalink":"https://loneyclown.github.io/tags/json/"},{"name":"array","slug":"array","permalink":"https://loneyclown.github.io/tags/array/"}]},{"title":"传统web项目配置babel@7自动兼容ES6语法","slug":"studyNotes/2019-08-12-notes","date":"2019-08-11T16:00:00.000Z","updated":"2021-09-26T06:36:32.090Z","comments":true,"path":"2019/08/12/studyNotes/2019-08-12-notes/","link":"","permalink":"https://loneyclown.github.io/2019/08/12/studyNotes/2019-08-12-notes/","excerpt":"","text":"安装babel@712npm install --save-dev @babel/core @babel/cli @babel/preset-envnpm install --save @babel/polyfill 在项目的根目录下创建一个命名为 babel.config.js 的配置文件默认配置： 123456789101112131415const presets = [ [ \"@babel/env\", &#123; targets: &#123; edge: \"17\", firefox: \"60\", chrome: \"67\", safari: \"11.1\", &#125;, useBuiltIns: \"usage\", &#125;, ],];module.exports = &#123; presets &#125;; 支持市场份额超过5%的浏览器： 123\"targets\": &#123; \"browsers\": \"&gt; 5%\"&#125; 支持最后两个版本的浏览器以及IE7+： 123\"targets\": &#123; \"browsers\": [\"last 2 versions\", \"ie &gt;= 7\"]&#125; 监听转化在需要转化的文件目录执行： 1npx babel --presets=@babel/env --root-mode upward shangpu_list_map.js --watch --out-file shangpu_list_map.min.js PS：若提示命令不存在，请全局安装babel-cli","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"js","slug":"js","permalink":"https://loneyclown.github.io/tags/js/"},{"name":"babel","slug":"babel","permalink":"https://loneyclown.github.io/tags/babel/"}]},{"title":"Vue学习笔记——起步","slug":"studyNotes-vue/起步","date":"2019-08-05T16:00:00.000Z","updated":"2021-09-26T06:36:32.088Z","comments":true,"path":"2019/08/06/studyNotes-vue/起步/","link":"","permalink":"https://loneyclown.github.io/2019/08/06/studyNotes-vue/%E8%B5%B7%E6%AD%A5/","excerpt":"","text":"项目搭建（使用vue-cli webpack）123$ yarn global add webpack $ yarn global add vue-cli$ vue init webpack vue init webpack 运行结果：安装完成如下：然后运行$ npm run dev访问http://localhost:8081，得到如下页面：至此，项目搭建完成！","categories":[{"name":"Vue学习笔记","slug":"Vue学习笔记","permalink":"https://loneyclown.github.io/categories/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://loneyclown.github.io/tags/vue/"}]},{"title":"chrome和安卓手机浏览器不显示input radio样式的解决办法","slug":"randomNotes/2019-03-20-Untitled","date":"2019-03-19T16:00:00.000Z","updated":"2021-09-26T06:36:32.087Z","comments":true,"path":"2019/03/20/randomNotes/2019-03-20-Untitled/","link":"","permalink":"https://loneyclown.github.io/2019/03/20/randomNotes/2019-03-20-Untitled/","excerpt":"","text":"chrome和安卓手机浏览器不显示input radio样式的解决办法input radio单选在安卓手机浏览器和chrome上不显示，无法点击、选中。这是由于webkit浏览器的input默认样式导致的。找到关于input的相关css，注释掉： 1input &#123; -webkit-appearance:none &#125; 关于-webkit-appearance，相关wiki是这么说的说明改变按钮和其他控件的外观，使其类似于原生控件。 -webkit-appearance 是一个 不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。 此属性非标准且渲染效果在不同浏览器下不同，有些属性值甚至不支持|，请慎用。语法1-webkit-appearance：none | button | button-bevel .... 默认值：none兼容性对应的firefox可以使用 -moz-appearance属性iOS 2.0及更高版本的Safari浏览器可用Android尚不明确取值 -webkit-appearance取值 介绍 Chrome Safari iOS Safari Android Browser none 去除系统默认appearance的样式,常用于IOS下移除原生样式 支持 支持 支持 支持 button 渲染成button的风格 支持 支持 支持 支持 button-bevel 渲染成button-bevel的风格 支持 支持 不支持 不支持 caret 渲染成caret的风格 支持 支持 不支持 不支持 checkbox 渲染input:checkbox样式的复选框按钮 支持 支持 支持 支持 listbox 渲染为listbox样式的复选框按钮 支持 支持 支持 支持 listitem 渲染成listitem的风格 支持 支持 不支持 不支持 media-fullscreen-button 渲染成media-fullscreen-button的风格 不支持 不支持 不支持 不支持 media-mute-button 渲染成media-mute-button的风格 支持 支持 不支持 不支持 media-seek-back-button 渲染成media-seek-back-button的风格 不支持 支持 不支持 不支持 media-seek-forward-button 渲染成media-seek-forward-button的风格 不支持 支持 不支持 不支持 media-slider 渲染成media-slider的风格 支持 支持 不支持 不支持 media-sliderthumb 渲染成media-sliderthumb的风格 支持 支持 不支持 不支持 menulist 渲染成menulist的风格 支持 支持 不支持 不支持 menulist-button 渲染成menulist-button的风格 支持 支持 支持 不支持 menulist-text 渲染成menulist-text的风格 支持 支持 不支持 不支持 menulist-textfield 渲染成menulist-textfield的风格 支持 支持 不支持 不支持 push-button 渲染成push-button的风格 支持 支持 支持 支持 radio 渲染成radio的风格 支持 支持 支持 支持 searchfield 渲染成searchfield的风格 支持 支持 不支持 支持 searchfield-cancel-button 渲染成searchfield-cancel-button的风格 支持 支持 不支持 支持 searchfield-decoration 渲染成searchfield-decoration的风格 支持 支持 不支持 不支持 searchfield-results-button 渲染成searchfield-results-button的风格 不支持 支持 不支持 不支持 searchfield-results-decoration 渲染成searchfield-results-decoration的风格 不支持 支持 不支持 不支持 slider-horizontal 渲染成slider-horizontal的风格 支持 支持 支持 支持 slider-vertical 渲染成slider-horizontal的风格 支持 支持 支持 支持 sliderthumb-horizontal 渲染成sliderthumb-horizontal的风格 支持 支持 支持 支持 sliderthumb-vertical 渲染成sliderthumb-vertical的风格 支持 支持 支持 支持 square-button 渲染成square-button的风格 支持 支持 支持 支持 textarea 渲染成textarea的风格 支持 支持 不支持 支持 textfield 渲染成textfield的风格 支持 支持 不支持 支持 scrollbarbutton-down 渲染成scrollbarbutton-down的风格 不支持 不支持 不支持 不支持 scrollbarbutton-left 渲染成scrollbarbutton-left的风格 不支持 不支持 不支持 不支持 scrollbarbutton-right 渲染成scrollbarbutton-right的风格 不支持 不支持 不支持 不支持 scrollbargripper-horizontal 渲染成scrollbargripper-horizontal的风格 不支持 不支持 不支持 不支持 scrollbargripper-vertical 渲染成scrollbargripper-vertical的风格 不支持 不支持 不支持 不支持 scrollbarthumb-horizontal 渲染成scrollbarthumb-horizontal的风格 不支持 不支持 不支持 不支持 scrollbarthumb-vertical 渲染成scrollbarthumb-vertical的风格 不支持 不支持 不支持 不支持 scrollbartrack-horizontal 渲染成scrollbartrack-horizontal的风格 不支持 不支持 不支持 不支持 scrollbartrack-vertical 渲染成scrollbartrack-horizontal的风格 不支持 不支持 不支持 不支持","categories":[{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"}],"tags":[{"name":"css","slug":"css","permalink":"https://loneyclown.github.io/tags/css/"}]},{"title":"苹果手机和安卓手机对于new Date()处理的一个小bug","slug":"studyNotes/2019-02-14-notes","date":"2019-02-13T16:00:00.000Z","updated":"2021-09-26T06:36:32.090Z","comments":true,"path":"2019/02/14/studyNotes/2019-02-14-notes/","link":"","permalink":"https://loneyclown.github.io/2019/02/14/studyNotes/2019-02-14-notes/","excerpt":"","text":"苹果手机和安卓手机对于new Date()处理的一个小bug1234567891011121314151617alert(new Date('2019-02-14')) //iphone: Thu Feb 14 2019 08:00:00 GMT+0800(CST)alert(new Date('2019-02-14')) //Android: Thu Feb 14 2019 08:00:00 GMT+0800(CST)alert(new Date('2019-02-14 11:00:05')) //iphone: Invalid Datealert(new Date('2019-02-14 11:00:05')) //Android: Thu Feb 14 2019 11:00:05 GMT+0800(CST)alert(new Date('2019-02-14 11:00:05.0')) //iphone: Invalid Datealert(new Date('2019-02-14 11:00:05.0')) //Android: Thu Feb 14 2019 11:00:05 GMT+0800(CST)alert(new Date('2019/02/14')) //iphone: Thu Feb 14 2019 08:00:00 GMT+0800(CST)alert(new Date('2019/02/14')) //Android: Thu Feb 14 2019 08:00:00 GMT+0800(CST)alert(new Date('2019/02/14 11:00:05')) //iphone: Thu Feb 14 2019 11:00:05 GMT+0800(CST)alert(new Date('2019/02/14 11:00:05')) //Android: Thu Feb 14 2019 11:00:05 GMT+0800(CST)alert(new Date('2019/02/14 11:00:05.0')) //iphone: Invalid Datealert(new Date('2019/02/14 11:00:05.0')) //Android: Thu Feb 14 2019 11:00:05 GMT+0800(CST) 可以看到，对于格式化yyyy-mm-dd格式，苹果和安卓的结果都是正常的，而只要日期后面加上时分秒苹果就会输出异常。而对于yyyy/mm/dd格式，不管加不加时分秒，苹果和安卓都是正常，但是加上毫秒（因为有些数据库的时间格式默认到了毫秒）后苹果又会异常。 解决方案对于没有精确到毫秒的时间使用正则替换“-”为“/”123function formatIOS(date) &#123; retuen new Date(date.replace(/-/g, \"/\"))&#125; 对于精确到了毫秒的时间只能舍弃毫秒而截取前面19位了123function formatIOS(date) &#123; retuen date.substr(0, 19)&#125;","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"js","slug":"js","permalink":"https://loneyclown.github.io/tags/js/"},{"name":"date","slug":"date","permalink":"https://loneyclown.github.io/tags/date/"},{"name":"时间格式化","slug":"时间格式化","permalink":"https://loneyclown.github.io/tags/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/"}]},{"title":"火影忍者疾风传OP《青鸟》","slug":"essays/2019-01-29-essays","date":"2019-01-28T16:00:00.000Z","updated":"2021-09-26T06:36:32.086Z","comments":true,"path":"2019/01/29/essays/2019-01-29-essays/","link":"","permalink":"https://loneyclown.github.io/2019/01/29/essays/2019-01-29-essays/","excerpt":"","text":"《青鸟》（《ブルーバード》）作曲：水野良樹作词：水野良樹演唱：いきものがかり（生物股长） 歌词正文 飞翔（はばた）いたら もとらないと言（い）ってhabata i tara motorana i to ii te当展翅飞翔之际 请下定决心不再回头 目指（めざ）したのは 苍（あおい）苍（あおい）あの空（そら）mezashitanowa a o i a o i anosora我们向往的目标 是那湛蓝湛蓝的天空 “悲（かな）しみ”はまだおぼえられずkanashimi wamada o bo e rarezu不曾真正理解”悲伤”的滋味 “切（せつ）なさ”は今（いま）つかみはじめたsetsunasawa i matsukamihajimeta却已开始探索”痛苦”的含义 あなたへと抱（いだ）く この感情（かんじょう）もmanataheto i daku konokannjyo u mo就连心中这份对你的感情 今（いま）“言叶（ことば）”にかわっていくi makotobanikawate i ku如今也即将渐渐凝聚成”话语” 未知（みち）なる世界（せかい）の 游迷（ゆめ）からめざめてmichinaru sekaino yumekara mezamete从对未知世界的痴迷中豁然觉醒 この羽根（はね）をひろげ 飞（と）び立（た）つkonohanewohiroge tobitatsu舒展双翅 飞向八篇广阔的天空 飞翔（はばた）いたら もとらないと言（い）ってhabata i tara motorana i to i te当展翅飞翔之际 请下定决心不再回头 目指（めざ）したのは 白（しろ）い 白（しろ）いあの云（くも）mezashitanowa shiroi shiroi anokumo我们飞往的方向 是那雪白雪白的流云 突（つ）き拔（ぬ）けたら みつかると知（し)ってtsukinuketara mitsukarutoshiite当冲破云层之时 你便会知晓梦之所在 振（ふ）り切（き）るほど 苍（あお）い 苍（あお）いあの空（そら）hurikiruhodo a o i a o i a nosora挣脱一切的来源 飞向那片湛蓝的天空 苍（あお)い苍（あお）いあの空（そら）a o i a o i a nosora那片湛蓝湛蓝的天空 苍（あお)い苍（あお）いあの空（そらa o i a o i a nosora那片湛蓝湛蓝的天空 爱想（あいそ）つきたような音（おとで）aisotsukitayounaotode随着一声仿佛诉说厌倦的声响 さびれた古（ふる）いまぢは坏（こわ）れたsabiretahurui mazawakowareta早已腐锈的陈旧门栓哐当落地 见饱（みめ）きたカゴは ほら拾（す）ててうくmimekitakagowa horasutete u ku让我们舍弃这早已看够的鸟笼 振（ふ）り返（かえ）ることはもうないhurika e rukotowamo u nai从此以后再也不必回头 高鸣（たかな）る鼓动（こどう）に呼吸（こきゅ）を共鸣（あつ）けてtakanaru kodo u ni kokyuo atsukete让呼吸与高昂的心跳声一同鸣响 このまどを蹴（け）って 飞（と）び立（た）つkonomado o kete tobitatsu舒展双翅飞离这个囚禁的牢笼 かけ出（だ）したら 手（て）にできると言（い）ってkakedashitara tenidekiruto i te当迈出步伐之际 请相信有志者事竟成 いざなうのは 远（とお）い远（とお）いあのこえi zana u nowa to o i to o i a no koe遥远彼方的呼唤 那是在邀请我们前往 眩（まぶ）しすぎた あなたの手（て）も握（にぎ）ってmabushisugita a natano temonigite面对刺眼的阳光 我愿紧紧握住你的手 求（もと）めるほど 苍（あお）い苍（あお）いあの空（そら）motomeruhodo a o i a o i a nosora跟随心中的渴求 飞翔那片湛蓝的天空 坠（お）ちていくと わかっていたo chite i kuto wakaate i ta早已明白 我们终有一天会从蓝天坠落 それでも光（ひかり）を追（お）いつづけていくよsoredemo hikario o i tsuduketeikuyo尽管如此 我也要继续追寻光芒的所在 飞翔（はばた）いたら もぢれないと言（い)ってhabata i tara mozarena i to ii te当展翅飞翔之际 请你明白已无法回头 探（さが）したのは 白（しろ）い白（しろ）いあの云（くも）zagashitanowa shiro i shiro i a nokumo我们寻觅的目标 是那雪白雪白的流云 突（つ）き拔（ぬ）けたら みつかると知（し)ってtsukiunketara mitsukarotoshiite当冲破云层之时 你便会知晓梦之所在 振（ふ）り切（き）るほど 苍（あお）い 苍（あお）いあの空（そら）hurikirohodo a o i a o i a nosora愿挣脱一切束缚 飞向那片湛蓝的天空 苍（あお)い苍（あお）いあの空（そら）a o i a o i a nosora那片湛蓝湛蓝的天空 苍（あお)い苍（あお）いあの空（そら)a o i a o i a nosora那片湛蓝湛蓝的天空 歌曲相关链接某云：《ブルーバード》中文版本：陈乐一 火影主题曲《青鸟》","categories":[{"name":"随笔","slug":"随笔","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]},{"title":"使用watcher-lessc自动编译less文件","slug":"studyNotes/2019-01-25-notes","date":"2019-01-24T16:00:00.000Z","updated":"2021-09-26T06:36:32.090Z","comments":true,"path":"2019/01/25/studyNotes/2019-01-25-notes/","link":"","permalink":"https://loneyclown.github.io/2019/01/25/studyNotes/2019-01-25-notes/","excerpt":"","text":"使用 watcher-lessc 自动编译less文件全局安装 watcher-lesscnpm install watcher-lessc -g UsageOptions input, -i &emsp;Specify input file to watch/compile. &emsp;[required] &emsp;#指定要监视/编译的输入文件paths, -p &emsp;Specify search paths for @import directives. &emsp;[default: []] &emsp;#指定@import指令的搜索路径compress, -c &emsp;Minify CSS output. &emsp;#缩小CSS输出filename, -f &emsp;Specify a filename, for better error messages. &emsp;[default: “style.less”] &emsp;#指定文件名，以获得更好的错误消息directory, -d &emsp;Specify input directory to watch. &emsp;#指定要监视的输入目录output, -o &emsp;Specify output file path. &emsp;[required] &emsp;#指定输出文件路径help, -h &emsp;&emsp;Show this message. &emsp;#帮助（显示此信息） Example12cd H:\\web project\\婚姻家事网\\MarriageService\\css\\lesswatcher-lessc -i marriageAndFamilyHarmony.less -o marriageAndFamilyHarmony.css","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"css","slug":"css","permalink":"https://loneyclown.github.io/tags/css/"},{"name":"less","slug":"less","permalink":"https://loneyclown.github.io/tags/less/"},{"name":"node","slug":"node","permalink":"https://loneyclown.github.io/tags/node/"}]},{"title":"Spring Boot 项目搭建","slug":"randomNotes/2018-12-16-SpringBoot2项目搭建","date":"2018-12-15T16:00:00.000Z","updated":"2021-09-26T06:36:32.087Z","comments":true,"path":"2018/12/16/randomNotes/2018-12-16-SpringBoot2项目搭建/","link":"","permalink":"https://loneyclown.github.io/2018/12/16/randomNotes/2018-12-16-SpringBoot2%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/","excerpt":"","text":"Spring Boot 项目搭建开发环境：IntelliJ IEDA 1.新建项目这里直接next 设置group和artifact DevTools顾名思义是开发工具，热更新等，lombok都知道，validation是表单验证或者说参数检查工具 点击完成 2.配置项目等待IDEA自动下载完成依赖后就可以开始配置项目了，项目目录结构： 这里我将另一个项目的截图贴出来目录结构 将application.properties文件改名为application.yml，写入配置： 12345678910111213141516server: port: 8080spring: http: encoding: enabled: true charset: UTF-8 force: true datasource: url: jdbc:mysql://127.0.0.1:3306/design?useUnicode=true&amp;characterEncoding=UTF8&amp;serverTimezone=GMT username: root password: root driver-class-name: com.mysql.cj.jdbc.Drivermybatis: type-aliases-package: com.clown.design.entity mapper-locations: classpath:mapper/*.xml 项目名+Application SpringBoot主类： 123456789101112131415package com.clown.design;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@MapperScan(basePackages = \"com.clown.design.dao\")@SpringBootApplicationpublic class DesignApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DesignApplication.class, args); &#125;&#125; Role: 123456789package com.clown.design.entity;import lombok.Data;@Datapublic class Role &#123; private Integer id; private String roleName; private String passWord; private Integer roleType;&#125; IRoleDao： 12345package com.clown.design.dao;import com.clown.design.entity.Role;public interface IRoleDao &#123; Role selectRoleById(Integer id);&#125; RoleDaoMapper： 1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.clown.design.dao.IRoleDao\"&gt; &lt;resultMap id=\"roleResult\" type=\"com.clown.design.entity.Role\"&gt; &lt;id column=\"id\" property=\"id\"/&gt; &lt;result column=\"roleName\" property=\"roleName\"/&gt; &lt;result column=\"passWord\" property=\"passWord\"/&gt; &lt;result column=\"roleType\" property=\"roleType\"/&gt; &lt;/resultMap&gt; &lt;select id=\"selectRoleById\" parameterType=\"Integer\" resultType=\"com.clown.design.entity.Role\"&gt; SELECT * FROM role WHERE id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; IRoleSerivce： 12345package com.clown.design.service;import com.clown.design.entity.Role;public interface IRoleSerivce &#123; Role getRoleById(Integer id);&#125; RoleServiceImpl： 123456789101112131415package com.clown.design.service.impl;import com.clown.design.dao.IRoleDao;import com.clown.design.entity.Role;import com.clown.design.service.IRoleSerivce;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class RoleServiceImpl implements IRoleSerivce &#123; @Autowired private IRoleDao roleDao; @Override public Role getRoleById(Integer id) &#123; return this.roleDao.selectRoleById(id); &#125;&#125; RoleController： 1234567891011121314151617181920212223242526package com.clown.design.controller;import com.clown.design.entity.Role;import com.clown.design.service.IRoleSerivce;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.HashMap;import java.util.Map;@CrossOrigin@RestController@RequestMapping(\"/role\")public class RoleController &#123; @Autowired private IRoleSerivce roleSerivce; @RequestMapping(value = \"/getRoleById\", method = RequestMethod.GET) public Map&lt;String, Object&gt; getRoleById(HttpServletRequest request, HttpServletResponse response, Role role) throws IOException &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(\"data\", this.roleSerivce.getRoleById(role.getId())); return map; &#125;&#125;","categories":[{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://loneyclown.github.io/tags/java/"},{"name":"SSM","slug":"SSM","permalink":"https://loneyclown.github.io/tags/SSM/"},{"name":"Spring","slug":"Spring","permalink":"https://loneyclown.github.io/tags/Spring/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://loneyclown.github.io/tags/Spring-Boot/"}]},{"title":"Spring data JPA项目搭建","slug":"randomNotes/2018-12-16-SpringDataJPA","date":"2018-12-15T16:00:00.000Z","updated":"2021-09-26T06:36:32.087Z","comments":true,"path":"2018/12/16/randomNotes/2018-12-16-SpringDataJPA/","link":"","permalink":"https://loneyclown.github.io/2018/12/16/randomNotes/2018-12-16-SpringDataJPA/","excerpt":"","text":"Spring data JPA项目搭建开发环境：IntelliJ IEDA 引导打开https://start.spring.io/选择构建工具（maven或者gradle）、开发语言、SpringBoot版本配置项目元数据：Group、Artifact、Options、打包方式，java版本等…选择依赖（Dependencies）安装的依赖：Spring Web、Spring Data JPA、Spring Security、Lombok、Spring Boot DevTools然后点击Generate构建，将zip压缩包下载下来 导入将上一步下载的压缩包解压，导入到IDEA选择从外部模型导入，然后选择Maven设置项目根目录，勾选Search for projects recursively，其他默认，点下一步一直下一步，直到完成","categories":[{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://loneyclown.github.io/tags/java/"},{"name":"SSM","slug":"SSM","permalink":"https://loneyclown.github.io/tags/SSM/"},{"name":"Spring","slug":"Spring","permalink":"https://loneyclown.github.io/tags/Spring/"},{"name":"Spring data JPA","slug":"Spring-data-JPA","permalink":"https://loneyclown.github.io/tags/Spring-data-JPA/"}]},{"title":"纯CSS3动画效果实现类技能CD加载效果","slug":"studyNotes/2018-11-28-notes","date":"2018-11-27T16:00:00.000Z","updated":"2021-09-26T06:36:32.089Z","comments":true,"path":"2018/11/28/studyNotes/2018-11-28-notes/","link":"","permalink":"https://loneyclown.github.io/2018/11/28/studyNotes/2018-11-28-notes/","excerpt":"","text":"纯CSS3动画效果实现类技能CD加载效果html12345&lt;div class=\"iib-mark\"&gt; &lt;div class=\"l1 vam\"&gt;&lt;/div&gt; &lt;div class=\"r1 vam\"&gt;&lt;/div&gt; &lt;div class=\"l2\"&gt;&lt;/div&gt;&lt;/div&gt; css12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667.iib-mark &#123; position: relative; top: 0; left: 0; width: 100rpx; height: 100rpx;&#125;.iib-mark&gt;div &#123; width: 50%; height: 100%; background: #fff;&#125;.iib-mark&gt;.l1 &#123; position: absolute; top: 0; left: 0; z-index: 3; transform-origin: right center;&#125;.iib-mark&gt;.l1.vam &#123; background: #c8c8c8; animation: v1 1.5s linear; animation-fill-mode: forwards;&#125;.iib-mark&gt;.r1 &#123; position: absolute; top: 0; right: 0; z-index: 1; transform-origin: left center;&#125;.iib-mark&gt;.r1.vam &#123; background: #c8c8c8; animation: v2 1.5s linear 1.5s; animation-fill-mode: forwards;&#125;.iib-mark&gt;.l2 &#123; position: absolute; top: 0; left: 0; z-index: 2; background: white;&#125;@keyframes v1 &#123; 0% &#123; transform: rotate(0); &#125; 99.9% &#123; z-index: 3; &#125; 100% &#123; transform: rotate(-180deg); z-index: -1; &#125;&#125;@keyframes v2 &#123; 0% &#123; transform: rotate(0); &#125; 99.9% &#123; opacity: 1; &#125; 100% &#123; transform: rotate(-180deg); opacity: 0; &#125;&#125;","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"css3","slug":"css3","permalink":"https://loneyclown.github.io/tags/css3/"},{"name":"加载","slug":"加载","permalink":"https://loneyclown.github.io/tags/%E5%8A%A0%E8%BD%BD/"}]},{"title":"小写金额转大写","slug":"randomNotes/2018-09-07-changeZN","date":"2018-09-06T16:00:00.000Z","updated":"2021-09-26T06:36:32.087Z","comments":true,"path":"2018/09/07/randomNotes/2018-09-07-changeZN/","link":"","permalink":"https://loneyclown.github.io/2018/09/07/randomNotes/2018-09-07-changeZN/","excerpt":"","text":"小写金额转大写传统方式代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354function changeZN(num)&#123; let charList=[0, '壹', '贰', '叁', '肆','伍', '陆', '柒', '捌', '玖']; let lowUnitList= ['千','百','拾','']; // let num='0'; num=num.padStart(Math.ceil(num.length/8)*8,0); let len=Math.ceil(num.length/8); let numSlice=[]; for(let i=0;i&lt;len;i++)&#123; numSlice.push(num.slice(i*8,(i+1)*8)) &#125; let allList=[]; for(let k=0;k&lt;len;k++)&#123; let num=numSlice[k]; num=num.padStart(Math.ceil(num.length/4)*4,0); let unitSlice=[]; let unitLen=Math.floor(num.length/4); let uintInteger=Math.floor(num/(10**4)); let unitMod=num%(10**4); for(let n=0;n&lt;unitLen;n++)&#123; unitSlice.push(num.slice(n*4,(n+1)*4)) &#125; let charNumList=[] for(let i=0;i&lt;unitSlice.length;i++)&#123; let charNum='' for(let j=0;j&lt;unitSlice[i].length;j++)&#123; if(unitSlice[i][j]!=='0')&#123; charNum+=charList[unitSlice[i][j]]+lowUnitList[j] &#125; else&#123; charNum+=0 &#125; &#125; charNumList.push(charNum) &#125; allList.push(charNumList.join('万')+(k===len-1?'元':'亿')); &#125; return allList.join('') .replace(/^(0&#123;4&#125;['千百拾万亿元'])+$/,'零元') .replace(/^(0+['千百拾万亿']?)+/,'') .replace(/0&#123;4,&#125;['千百拾万']/g,'') .replace(/0&#123;1,4&#125;(['千百拾万亿元'])/g,\"$1\") .replace(/0&#123;1,3&#125;['千百拾万']?/g,'零')&#125; 运行结果： 12console.log(changeZN('100869778'));// 壹亿零捌拾陆万玖千柒百柒拾捌元 ES6(node 12)代码： 12345678910111213141516171819202122232425262728293031function changeZN(num)&#123; const charList=[0, '壹', '贰', '叁', '肆','伍', '陆', '柒', '捌', '玖']; const lowUnitList= ['千','百','拾','']; let len =Math.ceil(num.length/8); let numSlice=num .padStart(len*8,0) .replace(/\\B(?=(?:\\d&#123;8&#125;)+(?!\\d))/g,\",亿,\") .split(\",\") .map(s=&gt;( s .replace(/\\B(?=(?:\\d&#123;4&#125;)+(?!\\d))/,\",万,\") .split(\",\") .map((n)=&gt;&#123; if(/^\\d&#123;4&#125;$/.test(n)&amp;&amp;n!==\"0000\")&#123; return [].map.call(n,(c,i)=&gt;&#123; return c===\"0\"?c:charList[c]+lowUnitList[i] &#125;).join(\"\") &#125;else&#123; return n &#125; &#125;) )) .flat() .join(\"\")+\"元\"; return (numSlice .replace(/^(0&#123;4&#125;['万亿元'])+$/,'零元') .replace(/(^(0+['万亿']?)+)|(0&#123;4&#125;['万'])/g,'') .replace(/0&#123;1,4&#125;(['万亿元'])/g,\"$1\") .replace(/0&#123;1,3&#125;/g,'零') )&#125; PS:以上代码来自我的同事大佬。。。","categories":[{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"}],"tags":[{"name":"js","slug":"js","permalink":"https://loneyclown.github.io/tags/js/"}]},{"title":"js实现svg图形转存为图片","slug":"studyNotes/2018-09-04-notes","date":"2018-09-03T16:00:00.000Z","updated":"2021-09-26T06:36:32.089Z","comments":true,"path":"2018/09/04/studyNotes/2018-09-04-notes/","link":"","permalink":"https://loneyclown.github.io/2018/09/04/studyNotes/2018-09-04-notes/","excerpt":"","text":"js实现svg图形转存为图片123&lt;div class=\"svg-wrap\"&gt; &lt;svg&gt;...&lt;/svg&gt;&lt;/div&gt; 12345678910111213141516171819var svgXml = $('.svg-wrap').html();var image = new Image();image.src = 'data:image/svg+xml;base64,' + window.btoa(unescape(encodeURIComponent(svgXml))); //给图片对象写入base64编码的svg流// $('body').append(image);var canvas = document.createElement('canvas'); //准备空画布canvas.width = $('.svg-wrap svg').width();canvas.height = $('.svg-wrap svg').height();var context = canvas.getContext('2d'); //取得画布的2d绘图上下文context.drawImage(image, 0, 0);$('body').append(canvas);// var a = document.createElement('a');// a.href = canvas.toDataURL('image/png'); //将画布内的信息导出为png图片数据// a.download = \"MapByMathArtSys\"; //设定下载名称// a.click(); //点击触发下载 原文链接：https://www.cnblogs.com/mmzuo-798/p/7090646.html","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"svg","slug":"svg","permalink":"https://loneyclown.github.io/tags/svg/"},{"name":"canvas","slug":"canvas","permalink":"https://loneyclown.github.io/tags/canvas/"}]},{"title":"古剑奇谭网络版《乌诏葬歌》","slug":"essays/2018-08-28-essays","date":"2018-08-27T16:00:00.000Z","updated":"2021-09-26T06:36:32.085Z","comments":true,"path":"2018/08/28/essays/2018-08-28-essays/","link":"","permalink":"https://loneyclown.github.io/2018/08/28/essays/2018-08-28-essays/","excerpt":"","text":"《乌诏葬歌》上古信仰阎罗的部族流传的古老葬歌，用于葬礼上送别亲人、安抚亡魂。旋律简单、容易记忆，有一定民族的特色。 歌词正文我父魂魄在漠北我母手足在高岩我儿心腹在天涯我女血肉在故园 我父魂魄在漠北流沙走石狂风催其日如煎，其月如烩，漠北不可居，何日来归漠北不可居，何日来归 我母手足在高岩再无妙手补苍天其峰巍巍，其水绵绵高岩不可居，何日来还高岩不可居，何日来还 此岸望彼岸归途路漫漫天心月未满故人隔忘川 我儿心腹在天涯长天浪涌入云塔魂落沉沙，身葬鱼虾天涯不可居，何日来家天涯不可居，何日来家 我女血肉在故园落花声里啼杜鹃朝佩青蔓，暮枕秋兰唯故园可居，何日来安唯故园可居，何日来安唯故园可居，何日来安唯故园可居，何日来安 此岸望彼岸归途路漫漫天心月未满故人隔忘川 长歌为谁传天地为谁宽身似寒鸦羽一梦过千山 归来啊~ 歌曲链接古剑奇谭网络版《乌诏葬歌》6分钟高清完整版：https://www.bilibili.com/video/av29726428","categories":[{"name":"随笔","slug":"随笔","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]},{"title":"美文美句收录集（二）","slug":"essays/2018-08-17-essays","date":"2018-08-16T16:00:00.000Z","updated":"2021-09-26T06:36:32.085Z","comments":true,"path":"2018/08/17/essays/2018-08-17-essays/","link":"","permalink":"https://loneyclown.github.io/2018/08/17/essays/2018-08-17-essays/","excerpt":"","text":"其一小女子不才，承蒙公子厚爱了多时。公子之心，我皆明了。公子之苦，我亦尽尝。奈何世无常，终究与公子情深缘浅，不得长相厮守一生白头。望此后遇得良人，公子且将付我心，付与他人可。祝公子平安喜乐，一生顺遂。你我，自是不必再相见了。 附小生不才，未得姑娘青睐，扰姑娘良久，姑娘勿怪，自此所有爱慕之意止于唇齿，匿与年华，姑娘往南走，小生往北瞧，不再打扰姑娘，今生就此别过，望姑娘日后善其身，遇良人予君欢喜城，暖色浮余生。 其二是小女冒犯了，还望公子见谅。应当那芳菲四月是个差错，那柳絮纷飞是个梦厄，那杯酒平生是个蹉跎，公子是我的梦里岁月，梦外便没了因果。世人皆无过，是我不才，不能得公子欢喜罢了。愿公子同她夜夜流光相皎洁才是，此去一别，珍重，便不必再见了。 其三小女子不才，承蒙公子错爱，没能与公子谈笑风生，望公子另觅良人，此经一别，自是永不相见，愿公子万水千程，一世平安。若有来生，请许我一世温柔，红妆十里，凤冠霞帔，为你所爱之人！ 其四小女子不才，承蒙公子错爱，愿公子觅得意中人，经此一别，自是永不相见，愿公子万水千程，一世平安。 其五奴家福薄，承蒙公子抬爱。望公子止步，公子莫哀。奈何终究世事无常，情深缘浅；流水蹉跎，落花梦厄。公子阳关道，奴家且过桥，勿念今朝情谊懵懂，至此各奔西东。请公子今日付我心，付伊人，与伊平安乐，一生喜顺遂。 其五小女子不才，不知公子早已心系别家姑娘。此经一别，自是不必相见了。 公子，以身相许于我，倒也不算委屈。 小女子无以为谢，唯有下辈子以身相许。 君王的手小女子牵了，就没想过要放开。 公子为我选发簪，我为公子绾墨发，朝朝暮暮相依偎，梳尽青丝鬓霜白。 公子手脚不净，便是身无分文。 其六小女子不才，不知公子早已心属别家女子，此今一别，值此不必再相见了，那最后祝公子，倾城万水，一路安好！ 其七小女不才，未得先生垂怜，饶先生良多，先生勿怪。自此所有爱慕之意止于心底，逝与年华，掩于彼此。先生南往，小女南望，不再想见不予打扰，今生咫尺，盼先生早遇红袖，伴于先生，于先生添香研磨，共复余生。 附·公子·其一小生不才，与姑娘萍水相逢，却妄自恋姑娘许久。世间纵有弱水三千，偏我眼中只有姑娘一人。小生不才，奈何姑娘已长发及腰，吾却功名未就。小生自问，心中唯姑娘一人耳，若能与姑娘携手一生，自当视姑娘如珍宝。小生不才，未能与姑娘谈笑风生，殊不知姑娘早以心系他人。未能与姑娘珍重道别，所有爱恨痴缠，尽在黄粱一梦中。未能共姑娘策马一生，所有思念成疾，尽在一身药骨之中。 附·公子·其二吾生良人终可觅，难得我心付她心。情深缘浅皆是非，深山清酒难自醉。 附·公子·其三小生不才，未能陪姑娘鲜衣怒马走天涯，只愿来生三生石前，奈何桥旁，再与姑娘共续前缘。","categories":[{"name":"随笔","slug":"随笔","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]},{"title":"元素内容增加，滚动条跟着滚动||获得元素的标签名","slug":"studyNotes/2018-08-14-notes","date":"2018-08-13T16:00:00.000Z","updated":"2021-09-26T06:36:32.089Z","comments":true,"path":"2018/08/14/studyNotes/2018-08-14-notes/","link":"","permalink":"https://loneyclown.github.io/2018/08/14/studyNotes/2018-08-14-notes/","excerpt":"","text":"元素内容增加，滚动条跟着滚动12$('.box').animate(&#123;scrollTop: $('.box')[0].scrollHeight&#125;, 500);// box 为需要滚动的容器 获得元素的标签名document.getElementById(&quot;demo&quot;).tagName; 12345// jquery获取点击元素的标签名$('#demo').click(function() &#123; console.log($(this)[0].tagName.toLowerCase()); // 在 HTML 中，tagName 属性的返回值始终是大写的，所以要转化为小写&#125;);","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"滚动条","slug":"滚动条","permalink":"https://loneyclown.github.io/tags/%E6%BB%9A%E5%8A%A8%E6%9D%A1/"},{"name":"标签名","slug":"标签名","permalink":"https://loneyclown.github.io/tags/%E6%A0%87%E7%AD%BE%E5%90%8D/"}]},{"title":"JS时间对象操作以及时间格式化","slug":"studyNotes/2018-07-12-notes","date":"2018-07-11T16:00:00.000Z","updated":"2021-09-26T06:36:32.089Z","comments":true,"path":"2018/07/12/studyNotes/2018-07-12-notes/","link":"","permalink":"https://loneyclown.github.io/2018/07/12/studyNotes/2018-07-12-notes/","excerpt":"","text":"JS时间对象取当前时间1var nowTime = new Date(); 取年、月、日123nowTime.getFullYear(); // 年nowTime.getMonth() + 1; // 月 因为 getMonth 返回的是从(0-11)的月份，故需+1nowTime.getDate(); // 日 其他方法 getgetTime()：返回从 1970 年 1 月 1 日至今的毫秒数。getDay()： 返回当前是星期几，返回值范围 (0-6)。getHours()： 返回时，返回值范围 (0-23)。getMinutes()：返回分，返回值范围 (0-59)。getSeconds()：返回秒，返回值范围 (0-59)。getMilliseconds()：返回毫秒，返回值范围 (0-999)。 其他方法 setsetFullYear()：设置 Date 对象中的年份（四位数字）。setMonth()：设置 Date 对象中的月份，取值范围 (0 ~ 11)。setDate()：设置 Date 对象中月的某一天，取值范围 (1 ~ 31)。setHours()：设置 Date 对象中的时，取值范围 (0 ~ 23)。setMinutes()：设置 Date 对象中的分，取值范围 (0 ~ 59)。setSeconds()：设置 Date 对象中的秒，取值范围 (0 ~ 59)。setMilliseconds()：设置 Date 对象中的毫秒，取值范围 (0 ~ 999)。setTime()：以毫秒设置 Date 对象。 格式化时间格式常用方法123456789101112131415161718192021Date.prototype.Format = function (fmt) &#123; // 对Date的扩展，将 Date 转化为指定格式的String // 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符， // 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) // 例子： // (new Date()).Format(\"yyyy-MM-dd hh:mm:ss.S\") ==&gt; 2006-07-02 08:09:04.423 // (new Date()).Format(\"yyyy-M-d h:m:s.S\") ==&gt; 2006-7-2 8:9:4.18 var o = &#123; \"M+\": this.getMonth() + 1, //月份 \"d+\": this.getDate(), //日 \"h+\": this.getHours(), //小时 \"m+\": this.getMinutes(), //分 \"s+\": this.getSeconds(), //秒 \"q+\": Math.floor((this.getMonth() + 3) / 3), //季度 \"S\": this.getMilliseconds() //毫秒 &#125;; if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + \"\").substr(4 - RegExp.$1.length)); for (var k in o) if (new RegExp(\"(\" + k + \")\").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length))); return fmt;&#125;","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"时间对象","slug":"时间对象","permalink":"https://loneyclown.github.io/tags/%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1/"},{"name":"Date对象","slug":"Date对象","permalink":"https://loneyclown.github.io/tags/Date%E5%AF%B9%E8%B1%A1/"}]},{"title":"VS Code 快捷键（中英文对照版）","slug":"randomNotes/2018-07-03-vscode","date":"2018-07-02T16:00:00.000Z","updated":"2021-09-26T06:36:32.086Z","comments":true,"path":"2018/07/03/randomNotes/2018-07-03-vscode/","link":"","permalink":"https://loneyclown.github.io/2018/07/03/randomNotes/2018-07-03-vscode/","excerpt":"","text":"VS Code 快捷键（中英文对照版）vs Code快捷键 按 Press 功能 Function Ctrl + Shift + P，F1 显示命令面板 Show Command Palette Ctrl + P 快速打开 Quick Open Ctrl + Shift + N 新窗口/实例 New window/instance Ctrl + Shift + W 关闭窗口/实例 Close window/instance 基础编辑 Basic editing 按 Press 功能 Function Ctrl+X 剪切行（空选定） Cut line (empty selection) Ctrl+C 复制行（空选定）Copy line (empty selection) Alt+ ↑ / ↓ 向上/向下移动行 Move line up/down Shift+Alt + ↓ / ↑ 向上/向下复制行 Copy line up/down Ctrl+Shift+K 删除行 Delete line Ctrl+Enter 在下面插入行 Insert line below Ctrl+Shift+Enter 在上面插入行 Insert line above Ctrl+Shift+\\ 跳到匹配的括号 Jump to matching bracket Ctrl+] / [ 缩进/缩进行 Indent/outdent line Home 转到行首 Go to beginning of line End 转到行尾 Go to end of line Ctrl+Home 转到文件开头 Go to beginning of file Ctrl+End 转到文件末尾 Go to end of file Ctrl+↑ / ↓ 向上/向下滚动行 Scroll line up/down Alt+PgUp / PgDown 向上/向下滚动页面 Scroll page up/down Ctrl+Shift+[ 折叠（折叠）区域 Fold (collapse) region Ctrl+Shift+] 展开（未折叠）区域 Unfold (uncollapse) region Ctrl+K Ctrl+[ 折叠（未折叠）所有子区域 Fold (collapse) all subregions Ctrl+K Ctrl+] 展开（未折叠）所有子区域 Unfold (uncollapse) all subregions Ctrl+K Ctrl+0 折叠（折叠）所有区域 Fold (collapse) all regions Ctrl+K Ctrl+J 展开（未折叠）所有区域 Unfold (uncollapse) all regions Ctrl+K Ctrl+C 添加行注释 Add line comment Ctrl+K Ctrl+U 删除行注释 Remove line comment Ctrl+/ 切换行注释 Toggle line comment Shift+Alt+A 切换块注释 Toggle block comment Alt+Z 切换换行 Toggle word wrap 导航 Navigation 按 Press 功能 Function Ctrl + T 显示所有符号 Show all Symbols Ctrl + G 转到行... Go to Line... Ctrl + P 转到文件... Go to File... Ctrl + Shift + O 转到符号... Go to Symbol... Ctrl + Shift + M 显示问题面板 Show Problems panel F8 转到下一个错误或警告 Go to next error or warning Shift + F8 转到上一个错误或警告 Go to previous error or warning Ctrl + Shift + Tab 导航编辑器组历史记录 Navigate editor group history Alt + ←/→ 返回/前进 Go back / forward Ctrl + M 切换选项卡移动焦点 Toggle Tab moves focus 搜索和替换 Search and replace 按 Press 功能 Function Ctrl + F 查找 Find Ctrl + H 替换 Replace F3 / Shift + F3 查找下一个/上一个 Find next/previous Alt + Enter 选择查找匹配的所有出现 Select all occurences of Find match Ctrl + D 将选择添加到下一个查找匹配 Add selection to next Find match Ctrl + K Ctrl + D 将最后一个选择移至下一个查找匹配项 Move last selection to next Find match Alt + C / R / W 切换区分大小写/正则表达式/整个词 Toggle case-sensitive / regex / whole word 多光标和选择 Multi-cursor and selection 按 Press 功能 Function Alt +单击 插入光标 Insert cursor Ctrl + Alt +↑/↓ 在上/下插入光标 Insert cursor above / below Ctrl + U 撤消上一个光标操作 Undo last cursor operation Shift + Alt + I 在选定的每一行的末尾插入光标 Insert cursor at end of each line selected Ctrl + I 选择当前行 Select current line Ctrl + Shift + L 选择当前选择的所有出现 Select all occurrences of current selection Ctrl + F2 选择当前字的所有出现 Select all occurrences of current word Shift + Alt + → 展开选择 Expand selection Shift + Alt + ← 缩小选择 Shrink selection Shift + Alt + （拖动鼠标） 列（框）选择 Column (box) selection Ctrl + Shift + Alt +（箭头键） 列（框）选择 Column (box) selection Ctrl + Shift + Alt + PgUp / PgDown 列（框）选择页上/下 Column (box) selection page up/down 丰富的语言编辑 Rich languages editing 按 Press 功能 Function Ctrl + 空格 触发建议 Trigger suggestion Ctrl + Shift + Space 触发器参数提示 Trigger parameter hints Tab Emmet 展开缩写 Emmet expand abbreviation Shift + Alt + F 格式化文档 Format document Ctrl + K Ctrl + F 格式选定区域 Format selection F12 转到定义 Go to Definition Alt + F12 Peek定义 Peek Definition Ctrl + K F12 打开定义到边 Open Definition to the side Ctrl + . 快速解决 Quick Fix Shift + F12 显示引用 Show References F2 重命名符号 Rename Symbol Ctrl + Shift + . /， 替换为下一个/上一个值 Replace with next/previous value Ctrl + K Ctrl + X 修剪尾随空格 Trim trailing whitespace Ctrl + K M 更改文件语言 Change file language 编辑器管理 Editor management 按 Press 功能 Function Ctrl+F4, Ctrl+W 关闭编辑器 Close editor Ctrl+K F 关闭文件夹 Close folder Ctrl+\\ 拆分编辑器 Split editor Ctrl+ 1 / 2 / 3 聚焦到第1，第2或第3编辑器组 Focus into 1st, 2nd or 3rd editor group Ctrl+K Ctrl+ ←/→ 聚焦到上一个/下一个编辑器组 Focus into previous/next editor group Ctrl+Shift+PgUp / PgDown 向左/向右移动编辑器 Move editor left/right Ctrl+K ← / → 移动活动编辑器组 Move active editor group 文件管理 File management 按 Press 功能 Function Ctrl+N 新文件 New File Ctrl+O 打开文件... Open File... Ctrl+S 保存 Save Ctrl+Shift+S 另存为... Save As... Ctrl+K S 全部保存 Save All Ctrl+F4 关闭 Close Ctrl+K Ctrl+W 关闭所有 Close All Ctrl+Shift+T 重新打开关闭的编辑器 Reopen closed editor Ctrl+K 输入保持打开 Enter Keep Open Ctrl+Tab 打开下一个 Open next Ctrl+Shift+Tab 打开上一个 Open previous Ctrl+K P 复制活动文件的路径 Copy path of active file Ctrl+K R 显示资源管理器中的活动文件 Reveal active file in Explorer Ctrl+K O 显示新窗口/实例中的活动文件 Show active file in new window/instance 显示 Display 按 Press 功能 Function F11 切换全屏 Toggle full screen Shift+Alt+1 切换编辑器布局 Toggle editor layout Ctrl+ = / - 放大/缩小 Zoom in/out Ctrl+B 切换侧栏可见性 Toggle Sidebar visibility Ctrl+Shift+E 显示浏览器/切换焦点 Show Explorer / Toggle focus Ctrl+Shift+F 显示搜索 Show Search Ctrl+Shift+G 显示Git Show Git Ctrl+Shift+D 显示调试 Show Debug Ctrl+Shift+X 显示扩展 Show Extensions Ctrl+Shift+H 替换文件 Replace in files Ctrl+Shift+J 切换搜索详细信息 Toggle Search details Ctrl+Shift+C 打开新命令提示符/终端 Open new command prompt/terminal Ctrl+Shift+U 显示输出面板 Show Output panel Ctrl+Shift+V 切换Markdown预览 Toggle Markdown preview Ctrl+K V 从旁边打开Markdown预览 Open Markdown preview to the side 调试 Debug 按 Press 功能 Function F9 切换断点 Toggle breakpoint F5 开始/继续 Start/Continue Shift+F5 停止 Stop F11 / Shift+F11 下一步/上一步 Step into/out F10 跳过 Step over Ctrl+K Ctrl+I 显示悬停 Show hover 集成终端 Integrated terminal 按 Press 功能 Function Ctrl+` 显示集成终端 Show integrated terminal Ctrl+Shift+` 创建新终端 Create new terminal Ctrl+Shift+C 复制选定 Copy selection Ctrl+Shift+V 粘贴到活动端子 Paste into active terminal Ctrl+↑ / ↓ 向上/向下滚动 Scroll up/down Shift+PgUp / PgDown 向上/向下滚动页面 Scroll page up/down Ctrl+Home / End 滚动到顶部/底部 Scroll to top/bottom 本文转自 https://blog.csdn.net/p358278505/article/details/74221214、https://segmentfault.com/a/1190000007688656","categories":[{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"}],"tags":[{"name":"vs code","slug":"vs-code","permalink":"https://loneyclown.github.io/tags/vs-code/"}]},{"title":"js判断json对象是否为空","slug":"studyNotes/2018-06-29-notes","date":"2018-06-28T16:00:00.000Z","updated":"2021-09-26T06:36:32.089Z","comments":true,"path":"2018/06/29/studyNotes/2018-06-29-notes/","link":"","permalink":"https://loneyclown.github.io/2018/06/29/studyNotes/2018-06-29-notes/","excerpt":"","text":"js判断json对象是否为空1$.isEmptyObjec(&#123;&#125;); jQuery.isEmptyObject()函数用于判断指定参数是否是一个空对象。所谓”空对象”，即不包括任何可枚举(自定义)的属性。简而言之，就是该对象没有属性可以通过for...in迭代。该函数属于全局jQuery对象。返回值jQuery.isEmptyObject()函数的返回值为Boolean类型，如果指定的参数是空对象，则返回true，否则返回false。 参考链接：jQuery 快速入门教程","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://loneyclown.github.io/tags/jQuery/"},{"name":"json","slug":"json","permalink":"https://loneyclown.github.io/tags/json/"}]},{"title":"美文美句收录集（一）","slug":"essays/2018-06-08-essays","date":"2018-06-25T16:00:00.000Z","updated":"2021-09-26T06:36:32.085Z","comments":true,"path":"2018/06/26/essays/2018-06-08-essays/","link":"","permalink":"https://loneyclown.github.io/2018/06/26/essays/2018-06-08-essays/","excerpt":"","text":"其一愿你三冬暖，愿你春不寒；愿你天黑有灯，下雨有伞；愿你路上有两人相伴。愿你所以快乐，无需假装；愿你此生尽兴，赤诚善良。愿时光能缓，愿故人不散；愿有人陪你颠沛流离。愿你惦念的人能和你道早安，愿你独创的日子里不觉得孤单。愿你人间走一遭，圆满了三界六道，看透了是非善恶；从此福来心至，皆是逍遥。 其二愿你一生有山可靠，有树可栖，与心爱之人，春赏花，夏纳凉，秋登山，冬扫雪。愿你在海边踏沙，有良人为伴。愿你在山巅眺望云雾，有痴傻的他紧拉。愿你如愿遇到命中的缘分，不早也不晚，不急也不缓。愿你爱的人也恰好爱着你，愿你一生努力，一生被爱。 其三〖帝王〗待我君临天下，许你风云叱吒待你君临天下，许谁风云叱吒，桃夭三千春意阑，我已嫁与他家。 〖丞相〗待我一人之下，许你赌书泼茶。待你一人之下，许谁赌书泼茶，只酒一杯抚琴叹，我已白首韶华。 〖将军〗待我功成名就，许你一世无忧。待你功成名就，许谁一世无忧，三千情思绾惆怅，我已纵马风流。 〖书生〗待我榜眼探花，许你桃夭灼华。待你榜眼探花，许谁桃夭灼华，此生本意逍遥游，我已青丝华发。 〖侠客〗待我不再有她，许你耕织篱下。待你不再有她，许谁耕织篱下，十里桃花为君守，我已红颜疏花。 〖红颜〗你说入我相思门，知我相思苦，怎知，那年花嫁，高头大马，怀中窝她，我笑声喑哑。你说青衣最无情，最是薄凉性，怎知，那年初夏，醉戏琵琶，负尽牵挂，我无声泪下。","categories":[{"name":"随笔","slug":"随笔","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]},{"title":"bundle 命令","slug":"randomNotes/2018-06-26-bundle-cmd","date":"2018-06-25T16:00:00.000Z","updated":"2021-09-26T06:36:32.086Z","comments":true,"path":"2018/06/26/randomNotes/2018-06-26-bundle-cmd/","link":"","permalink":"https://loneyclown.github.io/2018/06/26/randomNotes/2018-06-26-bundle-cmd/","excerpt":"","text":"Tasks[命令一览]bundle checkChecks if the dependencies listed in Gemfile are satisfied by currently installed gems[检查当前安装的gem是否满足Gemfile中列出的依赖项] bundle execRun the command in context of the bundle[在捆绑包的上下文中运行命令] bundle help [TASK]Describe available tasks or one specific task[描述可用的任务或一个特定的任务] bundle initGenerates a Gemfile into the current working directory[生成一个Gemfile到当前的工作目录] bundle installInstall the current environment to the system[将当前环境安装到系统] bundle lockChecks if the dependencies listed in Gemfile are satisfied by currently installed gems[将包绑定到当前的一组依赖项，包括所有的子依赖项] bundle packPacks all the gems to vendor/cache[将所有gems打包到vendor/cache] bundle showShows all gems that are part of the bundle[显示作为捆绑包一部分的所有gems] bundle unlockUnlock the bundle. This allows gem versions to be changed[解锁捆绑包。 这可以改变gem版本] 使用说明bundle pack这个命令可以打包你的gems到vendor/cache目录下。然后你把项目给别的开发者，别人就可以使用：bundle install来安装项目依赖的gems了。 但是当你想把项目部署到生产环境的话，假如gems出现新版本，可能导致项目出现错误，这个时候，我们就需要锁定gem的版本。bundle lock这个命令会在rails的根目录下生成一个Gemfile.lock文件。类似于这样的： 123456789101112--- dependencies: - rails: &#x3D; 3.0.0.beta- sqlite3-ruby: &quot;&gt;&#x3D; 0&quot;- pg: &quot;&gt;&#x3D; 0&quot;specs: - text-hyphen: version: 1.0.0- builder: version: 2.1.2- i18n: version: 0.3.3 当你在Gemfile文件里增加了一个新的gem，比如“hpricot”你运行：bundle check会提示：You changed your Gemfile after locking. Please relock using ‘bundle unlock’想修改Gemfile必须先解锁Gemfile文件：bundle unlock然后才能修改，修改完再锁定。bundle install这条命令会自动安装Gemfile里的所有gem。然后我们再检测：bundle check提示：The Gemfile’s dependencies are satisfied这就安全了。然后我们可以打包了：bundle packCopying .gem files into vendor/cache… 打包完以后，锁定我们的gems:bundle lock这下你就可以安全部署你的app了。","categories":[{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"}],"tags":[{"name":"Ruby","slug":"Ruby","permalink":"https://loneyclown.github.io/tags/Ruby/"},{"name":"bundle","slug":"bundle","permalink":"https://loneyclown.github.io/tags/bundle/"}]},{"title":"Git Bash 操作","slug":"Git/2018-06-26-Git-Bash","date":"2018-06-07T16:00:00.000Z","updated":"2021-09-26T06:36:32.084Z","comments":true,"path":"2018/06/08/Git/2018-06-26-Git-Bash/","link":"","permalink":"https://loneyclown.github.io/2018/06/08/Git/2018-06-26-Git-Bash/","excerpt":"","text":"Git Bash 操作Git基本常用命令如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859mkdir： XX (创建一个空目录 XX指目录名)pwd： 显示当前目录的路径。git init 把当前的目录变成可以管理的git仓库，生成隐藏.git文件。git add XX 把xx文件添加到暂存区去。git commit –m “XX” 提交文件 –m 后面的是注释。git status 查看仓库状态git diff XX 查看XX文件修改了那些内容git log 查看历史记录git reset --hard HEAD^ 或者 git reset --hard HEAD~ 回退到上一个版本 &#x2F;&#x2F; (如果想回退到100个版本，使用git reset –hard HEAD~100 )cat XX 查看XX文件内容git reflog 查看历史记录的版本号idgit checkout -- XX 把XX文件在工作区的修改全部撤销。git rm XX 删除XX文件git remote add origin &lt;https:&#x2F;&#x2F;github.com&#x2F;tugenhua0707&#x2F;testgit&gt; 关联一个远程库git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库git clone &lt;https:&#x2F;&#x2F;github.com&#x2F;tugenhua0707&#x2F;testgit&gt; 从远程库中克隆git checkout –b dev 创建dev分支 并切换到dev分支上git branch 查看当前所有的分支git checkout master 切换回master分支git merge dev 在当前的分支上合并dev分支git branch –d dev 删除dev分支git branch name 创建分支git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作git stash list 查看所有被隐藏的文件列表git stash apply 恢复被隐藏的文件，但是内容不删除git stash drop 删除文件git stash pop 恢复文件的同时 也删除文件git remote 查看远程库的信息git remote –v 查看远程库的详细信息git push origin master Git会把master分支推送到远程库对应的远程分支上 初始化项目123456789101112131415git initgit git add [文件名] &#x2F;&#x2F; 添加文件到暂存区，提交当前目录全部文件文件名填&quot;.&quot;git commit -m &#39;内容&#39; &#x2F;&#x2F; 提交内容， 加[-m &#39;内容&#39;]为为当次提交添加注释git status &#x2F;&#x2F; 查看是否还有文件未提交git diff [文件名]&#x2F;&#x2F; 比较差异git log &#x2F;&#x2F;查看日志 (git log –pretty&#x3D;oneline, &#39;单行显示日志&#39;)git reset --hard HEAD^ &#x2F;&#x2F; 回退到上一个版本,如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推,(git reset --hard HEAD~100 , &#39;回退到前100个版本&#39;)git reset --hard [版本号] &#x2F;&#x2F; 回退到指定版本 (git reflog, &#39;获取版本号&#39;) Clone 项目1git clone git@git.oschina.net:ifengye&#x2F;test.git &#x2F;&#x2F;SSH地址 提交项目12345git pull origin mastergit add .git commit -m &#39;init&#39; &#x2F;&#x2F;init为说明文字git commit --amend &#x2F;&#x2F;查看当前loggit push origin master 远程仓库在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令： 1ssh-keygen -t rsa –C “youremail@example.com” ,由于我本地此前运行过一次，所以本地有，如下所示：id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。点击 Add Key，你就应该可以看到已经添加的key。 如何添加远程库？现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令： 1git remote add origin &lt;https:&#x2F;&#x2F;github.com&#x2F;tugenhua0707&#x2F;testgit.git&gt; 所有的如下：把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示： 从现在起，只要本地作了提交，就可以通过如下命令： 1git push origin master 把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。 如何从远程库克隆？上面我们了解了先有本地库，后有远程库时候，如何关联远程库。现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？首先，登录github，创建一个新的仓库，名字叫testgit2.如下： 如下，我们看到：现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：接着在我本地目录下 生成testgit2目录了，如下所示：","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Git Bash","slug":"Git-Bash","permalink":"https://loneyclown.github.io/tags/Git-Bash/"}]},{"title":"Node 学习笔记","slug":"Node/2018-06-26-Node-notes","date":"2018-06-07T16:00:00.000Z","updated":"2021-09-26T06:36:32.085Z","comments":true,"path":"2018/06/08/Node/2018-06-26-Node-notes/","link":"","permalink":"https://loneyclown.github.io/2018/06/08/Node/2018-06-26-Node-notes/","excerpt":"","text":"Node 学习笔记窝·兹基·谢德创建一个server服务12345678// 引入http模块const http = require('http');//创建一个http服务http.createServer(function(req, res)&#123;&#125;).listen(8088, \"127.0.0.1\");console.log(\"服务启动成功，请访问：127.0.0.1\"); Node 中间件favicon的处理安装依赖 1npm install serve-favicon --save 添加代码到server.js 12var favicon = require('serve-favicon');app.use(favicon(__dirname + '/favicon.ico')); 自己编写中间件中间件大致结构 12app.use(xxx()); // xxx()可以是个匿名函数也可以是第三方中间件那样:app.use(bodyParser()); 一个打印请求时间的中间件（匿名结构） 1234app.use(function(req, res, next)&#123; console.log('Time:', Date.now()); next();&#125;); 挂载中间件12345// 挂载至 /user/:id 的中间件，任何指向 /user/:id 的请求都会执行它app.use('/user/:id', function(req, res, next)&#123; console.log('Request Type:', req.method); next();&#125;); 也就是说只有请求开头user/:id 才会被这个中间件处理，如果不是则会被忽略。此外上述的req.method是指请求的方式例如：get,post,put,delete 第一个Node.js程序server.js 123456789101112131415//依赖一个http模块，相当于java的import，与C#中的usingvar http = require('http');//创建一个服务器对象server = http.createSever(function(req, res) &#123;//设置请求成功时响应头部的MIME为纯文本res.writeHeader(200, &#123; \"Content-Type\": \"text/plain\" &#125;);//向客户端输出字符res.end(\"Hello World\\n\");&#125;)//让服务器在8088端口开始运行server.listen(8088, \"127.0.0.1);console.log(\"Server is running at 127.0.0.1:8088\"); 引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。 第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。 一个简单的Express项目index.js 12345678910111213141516171819//引入express模块var express = require('express');//创建一个app对象，类似一个web应用（网站）var app = express();//接受指定路径的请求，指定回调函数app.get('/', function(req, res) &#123; res.send('Hello World!');&#125;);//创建一个web服务器，可以认为就是web服务器对象//监听9988端口，当监听成功时回调var server = app.listen(9988, 'localhost', function()&#123; var host = server.address().address;//地址 var port = server.address().port;//端口 console.log('应用实例，访问地址为 http://%s:%s', host, port);&#125;);","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Node","slug":"Node","permalink":"https://loneyclown.github.io/tags/Node/"},{"name":"serve-favicon","slug":"serve-favicon","permalink":"https://loneyclown.github.io/tags/serve-favicon/"},{"name":"Express","slug":"Express","permalink":"https://loneyclown.github.io/tags/Express/"},{"name":"中间件","slug":"中间件","permalink":"https://loneyclown.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"CSS小知识以及mongod.conf相关配置","slug":"studyNotes/2018-06-08-notes","date":"2018-06-07T16:00:00.000Z","updated":"2021-09-26T06:36:32.089Z","comments":true,"path":"2018/06/08/studyNotes/2018-06-08-notes/","link":"","permalink":"https://loneyclown.github.io/2018/06/08/studyNotes/2018-06-08-notes/","excerpt":"","text":"媒介查询H5端横屏与竖屏12@media all and(orientation: landscape) /* 横屏CSS */@media all and(orientation: portrait) /* 竖屏CSS */ CSS 动态计算长度值1calc( ... ) mongod.conf1234logpath &#x3D; &#x2F;usr&#x2F;local&#x2F;src&#x2F;mongodb&#x2F;logs&#x2F;mongod.loglogappend &#x3D; truefork &#x3D; truedbpath &#x3D; &#x2F;usr&#x2F;local&#x2F;src&#x2F;mongodb&#x2F;data&#x2F;db 此处遇坑由于mongodb目录下一开始无logs文件夹，故以–fork参数启动mongd失败。报错： 1234about to fork child process, waiting until server is ready for connections.forked procsee: 1624 (PS: 此数字不固定)ERROR: child process failed, exited with error number 1To see additional in this output, start without the &quot;--fork&quot; option.","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://loneyclown.github.io/tags/CSS/"},{"name":"mongod","slug":"mongod","permalink":"https://loneyclown.github.io/tags/mongod/"}]}],"categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://loneyclown.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"随拾","slug":"随拾","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E6%8B%BE/"},{"name":"Vue学习笔记","slug":"Vue学习笔记","permalink":"https://loneyclown.github.io/categories/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"随笔","slug":"随笔","permalink":"https://loneyclown.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"jupyter","slug":"jupyter","permalink":"https://loneyclown.github.io/tags/jupyter/"},{"name":"js","slug":"js","permalink":"https://loneyclown.github.io/tags/js/"},{"name":"排序","slug":"排序","permalink":"https://loneyclown.github.io/tags/%E6%8E%92%E5%BA%8F/"},{"name":"字符编码","slug":"字符编码","permalink":"https://loneyclown.github.io/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"},{"name":"MAC","slug":"MAC","permalink":"https://loneyclown.github.io/tags/MAC/"},{"name":"GCP","slug":"GCP","permalink":"https://loneyclown.github.io/tags/GCP/"},{"name":"白嫖","slug":"白嫖","permalink":"https://loneyclown.github.io/tags/%E7%99%BD%E5%AB%96/"},{"name":"nginx","slug":"nginx","permalink":"https://loneyclown.github.io/tags/nginx/"},{"name":"macOS","slug":"macOS","permalink":"https://loneyclown.github.io/tags/macOS/"},{"name":"svn","slug":"svn","permalink":"https://loneyclown.github.io/tags/svn/"},{"name":"json","slug":"json","permalink":"https://loneyclown.github.io/tags/json/"},{"name":"array","slug":"array","permalink":"https://loneyclown.github.io/tags/array/"},{"name":"babel","slug":"babel","permalink":"https://loneyclown.github.io/tags/babel/"},{"name":"vue","slug":"vue","permalink":"https://loneyclown.github.io/tags/vue/"},{"name":"css","slug":"css","permalink":"https://loneyclown.github.io/tags/css/"},{"name":"date","slug":"date","permalink":"https://loneyclown.github.io/tags/date/"},{"name":"时间格式化","slug":"时间格式化","permalink":"https://loneyclown.github.io/tags/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/"},{"name":"less","slug":"less","permalink":"https://loneyclown.github.io/tags/less/"},{"name":"node","slug":"node","permalink":"https://loneyclown.github.io/tags/node/"},{"name":"java","slug":"java","permalink":"https://loneyclown.github.io/tags/java/"},{"name":"SSM","slug":"SSM","permalink":"https://loneyclown.github.io/tags/SSM/"},{"name":"Spring","slug":"Spring","permalink":"https://loneyclown.github.io/tags/Spring/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://loneyclown.github.io/tags/Spring-Boot/"},{"name":"Spring data JPA","slug":"Spring-data-JPA","permalink":"https://loneyclown.github.io/tags/Spring-data-JPA/"},{"name":"css3","slug":"css3","permalink":"https://loneyclown.github.io/tags/css3/"},{"name":"加载","slug":"加载","permalink":"https://loneyclown.github.io/tags/%E5%8A%A0%E8%BD%BD/"},{"name":"svg","slug":"svg","permalink":"https://loneyclown.github.io/tags/svg/"},{"name":"canvas","slug":"canvas","permalink":"https://loneyclown.github.io/tags/canvas/"},{"name":"滚动条","slug":"滚动条","permalink":"https://loneyclown.github.io/tags/%E6%BB%9A%E5%8A%A8%E6%9D%A1/"},{"name":"标签名","slug":"标签名","permalink":"https://loneyclown.github.io/tags/%E6%A0%87%E7%AD%BE%E5%90%8D/"},{"name":"时间对象","slug":"时间对象","permalink":"https://loneyclown.github.io/tags/%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1/"},{"name":"Date对象","slug":"Date对象","permalink":"https://loneyclown.github.io/tags/Date%E5%AF%B9%E8%B1%A1/"},{"name":"vs code","slug":"vs-code","permalink":"https://loneyclown.github.io/tags/vs-code/"},{"name":"jQuery","slug":"jQuery","permalink":"https://loneyclown.github.io/tags/jQuery/"},{"name":"Ruby","slug":"Ruby","permalink":"https://loneyclown.github.io/tags/Ruby/"},{"name":"bundle","slug":"bundle","permalink":"https://loneyclown.github.io/tags/bundle/"},{"name":"Git Bash","slug":"Git-Bash","permalink":"https://loneyclown.github.io/tags/Git-Bash/"},{"name":"Node","slug":"Node","permalink":"https://loneyclown.github.io/tags/Node/"},{"name":"serve-favicon","slug":"serve-favicon","permalink":"https://loneyclown.github.io/tags/serve-favicon/"},{"name":"Express","slug":"Express","permalink":"https://loneyclown.github.io/tags/Express/"},{"name":"中间件","slug":"中间件","permalink":"https://loneyclown.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"},{"name":"CSS","slug":"CSS","permalink":"https://loneyclown.github.io/tags/CSS/"},{"name":"mongod","slug":"mongod","permalink":"https://loneyclown.github.io/tags/mongod/"}]}